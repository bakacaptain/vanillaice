// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AlarmStructure.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ERCare;

public class AlarmStructure implements java.lang.Cloneable, java.io.Serializable
{
    public long alarmType;

    public long alarmValue;

    public String patId;

    public AlarmStructure()
    {
    }

    public AlarmStructure(long alarmType, long alarmValue, String patId)
    {
        this.alarmType = alarmType;
        this.alarmValue = alarmValue;
        this.patId = patId;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AlarmStructure _r = null;
        if(rhs instanceof AlarmStructure)
        {
            _r = (AlarmStructure)rhs;
        }

        if(_r != null)
        {
            if(alarmType != _r.alarmType)
            {
                return false;
            }
            if(alarmValue != _r.alarmValue)
            {
                return false;
            }
            if(patId != _r.patId)
            {
                if(patId == null || _r.patId == null || !patId.equals(_r.patId))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::ERCare::AlarmStructure");
        __h = IceInternal.HashUtil.hashAdd(__h, alarmType);
        __h = IceInternal.HashUtil.hashAdd(__h, alarmValue);
        __h = IceInternal.HashUtil.hashAdd(__h, patId);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(alarmType);
        __os.writeLong(alarmValue);
        __os.writeString(patId);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        alarmType = __is.readLong();
        alarmValue = __is.readLong();
        patId = __is.readString();
    }

    public static final long serialVersionUID = 1343743347L;
}
