// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RequestPatientValuesStructure.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ERCare;

public class RequestPatientValuesStructure implements java.lang.Cloneable, java.io.Serializable
{
    public long countOfValues;

    public String PatID;

    public RequestPatientValuesStructure()
    {
    }

    public RequestPatientValuesStructure(long countOfValues, String PatID)
    {
        this.countOfValues = countOfValues;
        this.PatID = PatID;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RequestPatientValuesStructure _r = null;
        if(rhs instanceof RequestPatientValuesStructure)
        {
            _r = (RequestPatientValuesStructure)rhs;
        }

        if(_r != null)
        {
            if(countOfValues != _r.countOfValues)
            {
                return false;
            }
            if(PatID != _r.PatID)
            {
                if(PatID == null || _r.PatID == null || !PatID.equals(_r.PatID))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::ERCare::RequestPatientValuesStructure");
        __h = IceInternal.HashUtil.hashAdd(__h, countOfValues);
        __h = IceInternal.HashUtil.hashAdd(__h, PatID);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(countOfValues);
        __os.writeString(PatID);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        countOfValues = __is.readLong();
        PatID = __is.readString();
    }

    public static final long serialVersionUID = 1971327900L;
}
